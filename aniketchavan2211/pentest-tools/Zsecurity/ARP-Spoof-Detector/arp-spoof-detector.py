#!/usr/bin/env python

# Implementing ARP Spoof Attack Detection Using Scapy
# Import Scapy module
import scapy.all as scapy

# code to get MAC Address 
def get_mac(ip):
  # requesting ARP packet from the IP address
  # If it's wrong then will throw error
  arp_request = scapy.ARP(pdst=ip)
  broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
  arp_request_broadcast = broadcast/arp_request
  answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]
  return answered_list[0][1].hwsrc

# taking interface of the system as an argument
# to sniff packets inside the network
def sniff(interface):
  # store=False tells sniff() function
  # to discard sniifed packets
  scapy.sniff(iface=interface, store=False, prn=process_sniffed_packet)

# defining function to process sniffed packet
def process_sniffed_packet(packet):
  # if it is an ARP packet and if is an ARP Response 
  if packet.haslayer(scapy.ARP) and packet[scapy.ARP].op == 2:
    try:
      # original Mac will get old MAC whereas
      real_mac = get_mac(packet[scapy.ARP].psrc)
      # response Mac will get response of the MAC
      response_mac = packet[scapy.ARP].hwsrc

      if real_mac != response_mac:
        print(" [+] You are under attack!! ")

    except IndexError:
      pass

# machine interface is "eth0", sniffing the interface
sniff("eth0") # wlan0 wlan1 eth0 set network interface
